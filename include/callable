#pragma once
#include <interpreter>
#include <functional>

typedef std::function<std::any(Interpreter&, const std::vector<std::any>&)> call_t;

class Callable {
  std::string name;
  int n_args;
  call_t call_fn;
public:
  Callable(const std::string& name, const int n_args, const call_t call_fn = [](Interpreter&, const std::vector<std::any>&){ return std::any(); });

  size_t arity();
  virtual std::any call(Interpreter& interpreter, const std::vector<std::any>& arguments);
  const std::string& to_string();
};