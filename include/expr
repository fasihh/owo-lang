#pragma once
#include <token>
#include <vector>
#include <memory>

struct Binary;
struct Assign;
struct Grouping;
struct Literal;
struct Unary;
struct Variable;
struct Ternary;

struct ExprVisitorBase {
	virtual void visitBinaryExpr(Binary& expr) = 0;
	virtual void visitAssignExpr(Assign& expr) = 0;
	virtual void visitGroupingExpr(Grouping& expr) = 0;
	virtual void visitLiteralExpr(Literal& expr) = 0;
	virtual void visitUnaryExpr(Unary& expr) = 0;
	virtual void visitVariableExpr(Variable& expr) = 0;
	virtual void visitTernaryExpr(Ternary& expr) = 0;
};

template <typename T>
struct ExprVisitor : ExprVisitorBase {
	T result_expr;
};

struct Expr {
	template <typename T>
	T accept(ExprVisitor<T>& visitor) {
		do_accept(visitor);
		return visitor.result_expr;
	}

	virtual void do_accept(ExprVisitorBase& visitor) = 0;
	virtual ~Expr() = default;
};

struct Binary : Expr {
	const std::unique_ptr<Expr> left;
	const Token* op;
	const std::unique_ptr<Expr> right;

	Binary(std::unique_ptr<Expr> left, const Token* op, std::unique_ptr<Expr> right)
		: left(std::move(left)), op(op), right(std::move(right)) {};

	void do_accept(ExprVisitorBase& visitor) { visitor.visitBinaryExpr(*this); }
};

struct Assign : Expr {
	const Token* name;
	const std::unique_ptr<Expr> value;

	Assign(const Token* name, std::unique_ptr<Expr> value)
		: name(name), value(std::move(value)) {};

	void do_accept(ExprVisitorBase& visitor) { visitor.visitAssignExpr(*this); }
};

struct Grouping : Expr {
	const std::unique_ptr<Expr> expression;

	Grouping(std::unique_ptr<Expr> expression)
		: expression(std::move(expression)) {};

	void do_accept(ExprVisitorBase& visitor) { visitor.visitGroupingExpr(*this); }
};

struct Literal : Expr {
	const std::any value;

	Literal(std::any value)
		: value(value) {};

	void do_accept(ExprVisitorBase& visitor) { visitor.visitLiteralExpr(*this); }
};

struct Unary : Expr {
	const Token* op;
	const std::unique_ptr<Expr> right;

	Unary(const Token* op, std::unique_ptr<Expr> right)
		: op(op), right(std::move(right)) {};

	void do_accept(ExprVisitorBase& visitor) { visitor.visitUnaryExpr(*this); }
};

struct Variable : Expr {
	const Token* label;

	Variable(const Token* label)
		: label(label) {};

	void do_accept(ExprVisitorBase& visitor) { visitor.visitVariableExpr(*this); }
};

struct Ternary : Expr {
	const std::unique_ptr<Expr> condition;
	const std::unique_ptr<Expr> true_case;
	const std::unique_ptr<Expr> false_case;

	Ternary(std::unique_ptr<Expr> condition, std::unique_ptr<Expr> true_case, std::unique_ptr<Expr> false_case)
		: condition(std::move(condition)), true_case(std::move(true_case)), false_case(std::move(false_case)) {};

	void do_accept(ExprVisitorBase& visitor) { visitor.visitTernaryExpr(*this); }
};

